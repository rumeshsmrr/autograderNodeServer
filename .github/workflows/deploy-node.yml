name: Deploy Node.js Microservice to AWS ECS via Docker Hub

on:
  push:
    branches:
      - main # Runs when changes are pushed to the main branch

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Build & Push Docker Image to Docker Hub
      - name: Build and Push Docker Image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          IMAGE_TAG="latest"  # Always push the latest image
          docker build -t $DOCKERHUB_USERNAME/node-service:$IMAGE_TAG .
          docker push $DOCKERHUB_USERNAME/node-service:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # Step 5: Configure AWS CLI
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-north-1  # Change region if needed

      # Step 6: Verify AWS Credentials
      - name: Verify AWS CLI Credentials
        run: aws sts get-caller-identity

      # Step 7: Force ECS to Redeploy Using the Same Task Definition
      - name: Force ECS Deployment with Same Task Definition
        run: |
          aws ecs update-service \
            --cluster programingAutograderNode \
            --service programingNodeService \
            --force-new-deployment
